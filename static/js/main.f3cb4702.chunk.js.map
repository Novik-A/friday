{"version":3,"sources":["d1-main/ui/Header/Header.module.css","d1-main/ui/common/c4-Error404/Error404.tsx","d1-main/dal/base-url.ts","d1-main/dal/api-login.ts","d1-main/dal/api-register.ts","d1-main/bll/authReducer.ts","d2-features/f1-auth/a3-forgot/f-3-dal/ForgotAPI.ts","d2-features/f1-auth/a3-forgot/f-2-bll/b-2-redux/forgotReducer.ts","d1-main/bll/appReducer.ts","d1-main/bll/loginReducer.ts","d1-main/ui/common/c1-SuperInputText/SuperInputText.tsx","d1-main/ui/common/c1-SuperInputText/SuperInputPassword.tsx","d1-main/ui/common/c2-SuperButton/SuperButton.tsx","d1-main/ui/common/c3-SuperCheckbox/SuperCheckbox.tsx","d2-features/f1-auth/a1-login/Login.tsx","d2-features/f1-auth/a2-register/Register.tsx","d2-features/f0-test/TestPage.tsx","d1-main/ui/Main/Main.tsx","d2-features/f1-auth/a3-forgot/f-1-ui/Forgot.tsx","d2-features/f1-auth/a3-forgot/f-1-ui/CheckEmail.tsx","d2-features/f1-auth/a3-forgot/f-1-ui/ForgotContainer.tsx","d2-features/f1-auth/a3-forgot/f-1-ui/ForgotPage.tsx","d2-features/f1-auth/a3-forgot/f-1-ui/SetPass.tsx","d1-main/dal/api-tabels.ts","d1-main/bll/tablesReducer.ts","d1-main/ui/components/c-2 Paginator/Paginator.tsx","d1-main/ui/components/c-5 Search/Search.tsx","d2-features/tabels/Tables.tsx","d1-main/dal/api-cards.ts","d1-main/bll/cardsReducer.ts","d2-features/tabels/TableContainer.tsx","d1-main/ui/Profile/Profile.tsx","d1-main/ui/components/c-5 Search/SearchForCards.tsx","d2-features/cards/Cards.tsx","d2-features/cards/CardsContainer.tsx","d1-main/ui/Routes/Routes.tsx","d1-main/ui/Header/Header.tsx","d1-main/ui/App.tsx","reportWebVitals.ts","d1-main/bll/store.ts","index.tsx","d1-main/ui/components/c-2 Paginator/Paginator.module.css","d1-main/ui/common/c1-SuperInputText/SuperInputText.module.css","d1-main/ui/components/c-5 Search/Search.module.css","d1-main/ui/common/c4-Error404/Error404.module.css","d1-main/ui/common/c2-SuperButton/SuperButton.module.css","d2-features/f1-auth/a3-forgot/f-1-ui/Forgot.module.css","d1-main/ui/common/c3-SuperCheckbox/SuperCheckbox.module.css"],"names":["module","exports","Error404","className","s","body","c","_404","hr","_1","_2","btn","href","instance","axios","create","baseURL","withCredentials","loginAPI","data","post","delete","registerAPI","initialState","isLoggedIn","isAuth","setIsLoggedInAC","isLogged","type","ForgotAPI","FORGOT_ERROR","FORGOT_SUCCESS","SET_PASS_SUCCESS","forgotInitialState","linkSent","setNewPass","email","error","forgotError","forgotTC","dispatch","setAppStatusAC","forgotData","from","message","then","res","forgotSuccess","catch","e","response","console","log","setPassTC","status","isInitialized","initializeAppTC","finally","defaultDate","Date","userData","_id","name","avatar","publicCardPacksCount","created","updated","isAdmin","verified","rememberMe","isRegistered","SuperInputText","onChange","onChangeText","onKeyPress","onEnter","spanClassName","restProps","finalSpanClassName","finalInputClassName","input","errorInput","superInput","currentTarget","value","key","SuperInputPassword","SuperButton","red","finalClassName","SuperCheckbox","onChangeChecked","children","checkbox","checked","Login","useDispatch","useSelector","state","loginRegister","forgot","useEffect","formik","useFormik","initialValues","password","validate","values","errors","test","onSubmit","loginData","loginResponse","resetForm","to","header","page","handleSubmit","htmlFor","id","getFieldProps","touched","style","color","PATH","FORGOT","textLink","text","REGISTER","link","Register","isReg","registerData","alert","JSON","stringify","action","TestPage","useState","setText","showAlert","setChecked","onClick","Main","Forgot","setEmail","placeholder","LOGIN","CheckEmail","ForgotContainer","ForgotPage","withRouter","token","useParams","setPassword","length","resetPasswordToken","tablesAPI","getPackParams","get","params","createData","updateData","put","cardPacks","user_id","path","cardsCount","grade","shots","rating","__v","cardPacksTotalCount","maxCardsCount","minCardsCount","pageCount","tokenDeathTime","sortPacks","packName","minParam","maxParam","getPackAC","packs","getPackTC","getState","tablesReducer","cardsParamsModel","min","max","Paginator","props","totalItemsCount","pageSize","currentPage","onPageNumberClick","portionSize","disabled","portionNumber","setPortionNumber","pagesCount","Math","ceil","pages","i","push","portionCount","leftPortionNumber","rightPortionNumber","paginator","paginatorNumbers","filter","p","map","onSpanClick","lastPage","Search","searchCallback","searchText","setSearchText","onEnterCB","searchBar","searchBarInput","searchBarBtn","Tables","history","useHistory","getPack","userId","packsState","classes","makeStyles","table","minWidth","useStyles","margin","display","flexFlow","alignItems","justifyContent","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","Button","createPack","cardsPack","variant","TableBody","row","a","getCards","scope","removePack","updatePack","GetAsyncRedirect","payload","height","width","cardsAPI","paramsObj","cards","answer","question","cardsPack_id","cardsTotalCount","maxGrade","minGrade","packUserId","getCardsAC","getCardsTC","getParams","TableContainer","useCallback","thunk","newPackData","pack","createPackTC","removePackTC","updatePackTC","Profile","SearchForCards","Cards","packId","createCard","card","removeCard","updateCard","CardsContainer","cardReducer","createCardTC","removeCardTC","updateCardTC","MAIN","TEST","SET_PASS","PROFILE","PACKS","CARDS","Routes","exact","render","Header","activeClassName","active","App","app","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","auth","newState","store","createStore","applyMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3cb4702.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__SknYj\",\"link\":\"Header_link__1cb0f\",\"active\":\"Header_active__b-SPl\",\"block\":\"Header_block__kYiV1\"};","import React from \"react\";\r\nimport s from \"./Error404.module.css\";\r\n\r\nexport const Error404 = () => {\r\n    return (\r\n        <div className={s.body}>\r\n            <div className={s.c}>\r\n                <div className={s._404}>404</div>\r\n                <hr className={s.hr}/>\r\n                <div className={s._1}>THE PAGE</div>\r\n                <div className={s._2}>WAS NOT FOUND</div>\r\n                <a className={s.btn} href='#'>BACK TO HOME</a>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst BaseURLs = {\r\n    local: 'http://localhost:7542/2.0/',\r\n    ownTestHerokuServer: 'https://cards-friday-back.herokuapp.com/2.0/',\r\n    release: 'https://neko-back.herokuapp.com/2.0/'\r\n}\r\n\r\nexport const instance = axios.create({\r\n    baseURL: BaseURLs.release,\r\n    withCredentials: true,\r\n})\r\n","import {instance} from \"./base-url\";\r\n\r\n\r\n// api\r\nexport const loginAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseLoginType>(`auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.post<ResponseLoginType>(`auth/me`, {})\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/me`)\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n}\r\nexport type ResponseLoginType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n    created: Date;\r\n    updated: Date;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n    error?: string;\r\n}\r\ntype ResponseType = {\r\n    info: string\r\n    error: string\r\n}\r\n\r\n","import {instance} from \"./base-url\";\r\n\r\n// api\r\nexport const registerAPI = {\r\n    register(data: RegisterParamsType) {\r\n        return instance.post<ResponseRegisterType>(`auth/register`, data)\r\n    },\r\n}\r\n\r\n// types\r\nexport type RegisterParamsType = {\r\n    email: string\r\n    password: string\r\n}\r\nexport type ResponseRegisterType = {\r\n    addUser: any\r\n    error?: string\r\n}\r\n\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI} from \"../dal/api\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    isAuth: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.isLogged}\r\n        case \"AUTH/SET-IS-AUTH\": {\r\n            return {...state, isAuth: action.isAuth}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (isLogged: boolean) => ({type: 'AUTH/SET-IS-LOGGED-IN', isLogged} as const)\r\nexport const setIsAuthAC = (isAuth: boolean) => ({type: 'AUTH/SET-IS-AUTH', isAuth} as const)\r\n\r\n\r\n// thunks\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n\r\n    authAPI.logout()\r\n        .then(res => {\r\n\r\n        })\r\n        .catch((error) => {\r\n\r\n        })\r\n}\r\nexport const setIsAuthTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        setIsAuthAC(true)\r\n        if (res.status === 200) {\r\n            setIsAuthAC(true)\r\n        }\r\n    }).catch(err => {\r\n        alert(err.error)\r\n    })\r\n}\r\n\r\n// types\r\ntype InitialStateType = typeof initialState\r\nexport type setIsLoggedInActionType = ReturnType<typeof setIsLoggedInAC>\r\nexport type setIsAuthActionType = ReturnType<typeof setIsAuthAC>\r\ntype ActionsType = setIsLoggedInActionType | setIsAuthActionType\r\n","import { instance } from \"../../../../d1-main/dal/base-url\";\r\n\r\n\r\nexport const ForgotAPI = {\r\n    forgot(data: ForgotParamsType) {\r\n        return instance.post<ResponseForgotType | ErrorForgotType>(`auth/forgot`, data)\r\n    },\r\n    setPass(data: SetPassParamsType) {\r\n        return instance.post<ResponseSetPassType | ErrorSetPassType>(`auth/set-new-password`, data)\r\n    }\r\n};\r\n\r\n\r\n// types\r\nexport type ForgotParamsType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\nexport type ResponseForgotType = {\r\n    answer: boolean\r\n    html: boolean\r\n    info: string\r\n    success: boolean\r\n}\r\nexport type ErrorForgotType = {\r\n    email: string\r\n    emailRegExp: {}\r\n    error: string\r\n    in: string\r\n}\r\nexport type SetPassParamsType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\nexport type ResponseSetPassType = {\r\n    answer: boolean\r\n    html: boolean\r\n    info: string\r\n    success: boolean\r\n}\r\nexport type ErrorSetPassType = {\r\n    email: string\r\n    emailRegExp: {}\r\n    error: string\r\n    in: string\r\n}","import {Dispatch} from \"redux\";\r\nimport {ForgotAPI, ForgotParamsType, SetPassParamsType} from \"../../f-3-dal/ForgotAPI\";\r\nimport {setAppStatusAC, SetAppStatusActionType} from \"../../../../../d1-main/bll/appReducer\";\r\n\r\nconst FORGOT_LOADING = 'FORGOT/LOADING';\r\nconst FORGOT_ERROR = 'FORGOT/ERROR';\r\nconst FORGOT_SUCCESS = 'FORGOT/SUCCESS';\r\nconst SET_PASS_SUCCESS = 'SET_PASS/SUCCESS';\r\n\r\nconst forgotInitialState = {\r\n    linkSent: false,\r\n    setNewPass: false,\r\n    email: '',\r\n    error: ''\r\n};\r\n\r\nexport const forgotReducer = (state: InitialStateType = forgotInitialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FORGOT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                linkSent: true,\r\n                email: action.email\r\n            }\r\n        case FORGOT_ERROR:\r\n            return {...state, error: action.error}\r\n        case SET_PASS_SUCCESS:\r\n            return {...state, setNewPass: true}\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\n// actions\r\nexport const forgotSuccess = (email: string) =>\r\n    ({type: FORGOT_SUCCESS, email} as const)\r\nexport const forgotError = (error: string) =>\r\n    ({type: FORGOT_ERROR, error} as const)\r\nexport const setPassSuccess = () =>\r\n    ({type: SET_PASS_SUCCESS} as const)\r\n\r\n// thunks\r\nexport const forgotTC = (email: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    const forgotData: ForgotParamsType = {\r\n        email: email,\r\n        from: \"test-front-admin <ai73a@yandex.by>\",\r\n        message: `<div style=\"background-color: lime; padding: 15px\">password recovery link: \r\n                <a href='http://localhost:3000/#/set-new-password/$token$'>link</a></div>`\r\n    }\r\n    ForgotAPI.forgot(forgotData)\r\n        .then(res => {\r\n            dispatch(forgotSuccess(forgotData.email))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            console.log('Error: ', error)\r\n            dispatch(forgotError(error))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const setPassTC = (data: SetPassParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    ForgotAPI.setPass(data)\r\n        .then(res => {\r\n            dispatch(setPassSuccess())\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            console.log('Error: ', error)\r\n            dispatch(forgotError(error))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n\r\n\r\n// types\r\ntype InitialStateType = typeof forgotInitialState\r\nexport type FogotErrorActionType = ReturnType<typeof forgotError>\r\n\r\ntype ActionsType = ReturnType<typeof forgotSuccess>\r\n    | FogotErrorActionType\r\n    | ReturnType<typeof setPassSuccess>\r\n    | SetAppStatusActionType","import { AxiosError } from 'axios';\r\nimport {Dispatch} from 'redux'\r\nimport {authAPI} from \"../dal/api\";\r\nimport {loginAPI} from \"../dal/api-login\";\r\nimport {forgotError} from \"../../d2-features/f1-auth/a3-forgot/f-2-bll/b-2-redux/forgotReducer\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status}) as const\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error}) as const\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type: 'APP/SET-IS-INITIALIZED', isInitialized}) as const\r\n\r\n// thunks\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    loginAPI.me().then(res => {\r\n        // if (res.data.resultCode === 0) {\r\n            // dispatch(setIsLoggedInAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        console.log(res)\r\n        // } else {\r\n            // handleServerAppError(dispatch, res.data)\r\n        // }\r\n    })\r\n        .catch((e) => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            console.log('Error: ', error)\r\n            dispatch(forgotError(error))\r\n            dispatch(setAppStatusAC('failed'))\r\n        }).finally(() => {\r\n        dispatch(setIsInitializedAC(true))\r\n    })\r\n}\r\n\r\n// types\r\nexport type InitialStateType = typeof initialState\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetIsInitializedActionType = ReturnType<typeof setIsInitializedAC>\r\n\r\ntype ActionsType =\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | SetIsInitializedActionType","import { Router } from 'react-router-dom';\r\nimport {Dispatch} from 'redux'\r\nimport {loginAPI, LoginParamsType, ResponseLoginType } from '../dal/api-login';\r\nimport {registerAPI, RegisterParamsType, ResponseRegisterType} from \"../dal/api-register\";\r\nimport {setIsAuthAC, setIsAuthActionType, setIsLoggedInAC, setIsLoggedInActionType } from './authReducer';\r\nimport { push } from 'react-router-redux';\r\nimport {setAppStatusAC, SetAppStatusActionType} from \"./appReducer\";\r\nimport {FogotErrorActionType, forgotError} from \"../../d2-features/f1-auth/a3-forgot/f-2-bll/b-2-redux/forgotReducer\";\r\n\r\n\r\nlet defaultDate: Date = new Date();\r\nconst initialState = {\r\n    userData: {\r\n        _id: \"\",\r\n        email: \"\",\r\n        name: \"\",\r\n        avatar: \"\",\r\n        publicCardPacksCount: 0,\r\n        created: defaultDate,\r\n        updated: defaultDate,\r\n        isAdmin: false,\r\n        verified: false,\r\n        rememberMe: false,\r\n        error: \"\"\r\n    },\r\n    isRegistered: false,\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const loginRegisterReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/LOGIN':\r\n            return {...state, userData: action.loginResponse, isLoggedIn: true}\r\n        case \"AUTH/IS_REGISTERED\": {\r\n            return  {...state, isRegistered: action.isRegistered}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const loginAC = (loginResponse: ResponseLoginType) => ({type: 'AUTH/LOGIN', loginResponse} as const)\r\nexport const isRegisteredAC = (isRegistered: boolean) => ({type: 'AUTH/IS_REGISTERED', isRegistered} as const)\r\nexport const registerAC = () => ({type: 'AUTH/REGISTER'} as const)\r\n\r\n// thunks\r\nexport const loginTC = (loginData: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    loginAPI.login(loginData)\r\n        .then(res => {\r\n            dispatch(loginAC(res.data))\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            console.log('Error: ', error)\r\n            dispatch(forgotError(error))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    loginAPI.logout()\r\n        .then(res => {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((e) => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            console.log('Error: ', error)\r\n            dispatch(forgotError(error))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const registerTC = (registerData: RegisterParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    registerAPI.register(registerData).then(res => {\r\n        dispatch(registerAC())\r\n        dispatch(isRegisteredAC(true))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    }).catch((e) => {\r\n        const error = e.response\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n        console.log('Error: ', error)\r\n        dispatch(forgotError(error))\r\n        dispatch(setAppStatusAC('failed'))\r\n    })\r\n}\r\n\r\n// types\r\ntype InitialStateType = {\r\n    userData: ResponseLoginType\r\n    isRegistered: boolean\r\n    isLoggedIn: boolean\r\n}\r\ntype RegisterActionType = ReturnType<typeof registerAC>\r\ntype loginActionType = ReturnType<typeof loginAC>\r\ntype IsRegisteredActionType = ReturnType<typeof isRegisteredAC>\r\ntype ActionsType = loginActionType | RegisterActionType | setIsLoggedInActionType\r\n    | IsRegisteredActionType | SetAppStatusActionType | FogotErrorActionType | setIsAuthActionType\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\r\nimport s from \"./SuperInputText.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n};\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value);\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        e.key === \"Enter\" // если нажата кнопка Enter\r\n        && onEnter // и есть пропс onEnter\r\n        && onEnter(); // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : \"\"}`;\r\n    const finalInputClassName = `${s.input} ${error ? s.errorInput : s.superInput} ${className ? className : \"\"}`; // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={\"text\"}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SuperInputText;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\r\nimport s from \"./SuperInputText.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n};\r\n\r\nconst SuperInputPassword: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value);\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        e.key === \"Enter\" // если нажата кнопка Enter\r\n        && onEnter // и есть пропс onEnter\r\n        && onEnter(); // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : \"\"}`;\r\n    const finalInputClassName = `${s.input} ${error ? s.errorInput : s.superInput} ${className ? className : \"\"}`; // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={\"password\"}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SuperInputPassword;\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport s from \"./SuperButton.module.css\";\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${red ? s.red : s.btn} ${className}`;\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    );\r\n}\r\n\r\nexport default SuperButton;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport s from \"./SuperCheckbox.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n};\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked);\r\n    }\r\n\r\n    const finalInputClassName = `${className ? className : \"\"}`;\r\n\r\n    return (\r\n        <label className={s.checkbox}>\r\n            <input\r\n                type={\"checkbox\"}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            <span>{children}</span>\r\n        </label>  // благодаря label нажатие на спан передастся в инпут\r\n    );\r\n}\r\n\r\nexport default SuperCheckbox;\r\n","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../../../d1-main/bll/loginReducer\";\r\nimport {useFormik} from \"formik\";\r\nimport s from '../a3-forgot/f-1-ui/Forgot.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../../d1-main/ui/Routes/Routes\";\r\nimport SuperInputText from \"../../../d1-main/ui/common/c1-SuperInputText/SuperInputText\";\r\nimport SuperInputPassword from \"../../../d1-main/ui/common/c1-SuperInputText/SuperInputPassword\";\r\nimport {AppRootStateType} from \"../../../d1-main/bll/store\";\r\nimport {Redirect} from \"react-router\";\r\nimport SuperButton from \"../../../d1-main/ui/common/c2-SuperButton/SuperButton\";\r\nimport SuperCheckbox from \"../../../d1-main/ui/common/c3-SuperCheckbox/SuperCheckbox\";\r\nimport {forgotError} from \"../a3-forgot/f-2-bll/b-2-redux/forgotReducer\";\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.loginRegister.isLoggedIn)\r\n    const error = useSelector<AppRootStateType, string>(state => state.forgot.error)\r\n\r\n    useEffect(() => {\r\n        dispatch(forgotError(''))\r\n    }, [])\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            }   else if (!/^[A-Z0-9._%+-]{8,15}$/i.test(values.password)) {\r\n                errors.email = 'Invalid password';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            // console.log(values)\r\n            // alert(JSON.stringify(values));\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    // let onRememberMeChange = () => {\r\n    //    formik.values.rememberMe = !formik.values.rememberMe;\r\n    // }\r\n\r\n    if(isLoggedIn) {\r\n        return <Redirect to={'/profile'} />\r\n    }\r\n\r\n    return (\r\n        <div className={s.body}>\r\n            <div className={s.header}>It-incubator</div>\r\n            <div className={s.page}>Sing In</div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div>\r\n                    <label htmlFor=\"email\">email</label>\r\n                    <SuperInputText id='email' error={error}\r\n                            {...formik.getFieldProps('email')} />\r\n                    {formik.touched.email && formik.errors.email && <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"password\">password</label>\r\n                    <SuperInputPassword id='password'\r\n                           {...formik.getFieldProps('password')} />\r\n                    {formik.touched.password && formik.errors.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                </div>\r\n                <div>\r\n                    {/*<label htmlFor=\"rememberMe\">remember me</label>*/}\r\n                    {/*<input onChange={onRememberMeChange}*/}\r\n                    {/*       type=\"checkbox\" name=\"rememberMe\" />*/}\r\n                    <SuperCheckbox children={'Remember me'}\r\n                                   {...formik.getFieldProps('rememberMe')}/>\r\n                </div>\r\n                <NavLink to={PATH.FORGOT} className={s.textLink}>Forgot password</NavLink>\r\n                <div>\r\n                    <SuperButton type='submit'>Login</SuperButton>\r\n                </div>\r\n            </form>\r\n            <div className={s.text}>Don't have an account?</div>\r\n            <NavLink to={PATH.REGISTER} className={s.link}>Sing Up</NavLink>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useEffect} from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { registerTC } from \"../../../d1-main/bll/loginReducer\";\r\nimport {Redirect, useHistory} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../../d1-main/bll/store\";\r\nimport s from \"../a3-forgot/f-1-ui/Forgot.module.css\";\r\nimport SuperInputText from \"../../../d1-main/ui/common/c1-SuperInputText/SuperInputText\";\r\nimport SuperInputPassword from \"../../../d1-main/ui/common/c1-SuperInputText/SuperInputPassword\";\r\nimport SuperButton from \"../../../d1-main/ui/common/c2-SuperButton/SuperButton\";\r\nimport {forgotError} from \"../a3-forgot/f-2-bll/b-2-redux/forgotReducer\";\r\n\r\nexport const Register = () => {\r\n    const error = useSelector<AppRootStateType, string>(state => state.forgot.error)\r\n    const isReg = useSelector<AppRootStateType, boolean>(state => state.loginRegister.isRegistered)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.loginRegister.isLoggedIn)\r\n    useEffect(() => {\r\n        dispatch(forgotError(''))\r\n    }, [])\r\n\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n    }\r\n\r\n    let dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Password is required';\r\n            }   else if (!/^[A-Z0-9._%+-]{5,15}$/i.test(values.password)) {\r\n                errors.email = 'Invalid password';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            console.log(values)\r\n            alert(JSON.stringify(values));\r\n            dispatch(registerTC(values), )\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isReg) {\r\n        // dispatch(isInitializedAC(true))\r\n        return <Redirect to={'/login'} />\r\n    }\r\n    if(isLoggedIn) {\r\n        return <Redirect to={'/profile'} />\r\n    }\r\n\r\n    return (\r\n        <div className={s.body}>\r\n            <div className={s.header}>It-incubator</div>\r\n            <div className={s.page}>Sing In</div>\r\n            <form action=\"\" onSubmit={formik.handleSubmit}>\r\n                <div>\r\n                    <label htmlFor=\"email\">email</label>\r\n                    <SuperInputText id='email' error={error}\r\n                                    {...formik.getFieldProps('email')}\r\n                    />\r\n                    {   formik.touched.email &&\r\n                    formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"password\">password</label>\r\n                    <SuperInputPassword id='password'\r\n                                        {...formik.getFieldProps('password')}\r\n                    />\r\n                    {   formik.touched.password &&\r\n                    formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                </div>\r\n                <SuperButton type='submit'>Register</SuperButton>\r\n            </form>\r\n        </div>\r\n\r\n    );\r\n}\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport SuperInputText from \"../../d1-main/ui/common/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../d1-main/ui/common/c2-SuperButton/SuperButton\";\r\nimport SuperCheckbox from \"../../d1-main/ui/common/c3-SuperCheckbox/SuperCheckbox\";\r\n\r\nexport const TestPage = () => {\r\n    const [text, setText] = useState<string>(\"\");\r\n    const error = text ? \"\" : \"error\";\r\n    const showAlert = () => {\r\n        if (error) {\r\n            alert(\"введите текст...\");\r\n        } else {\r\n            alert(text);\r\n        }\r\n    }\r\n\r\n    const [checked, setChecked] = useState<boolean>(false);\r\n    const testOnChange = (e: ChangeEvent<HTMLInputElement>) => setChecked(e.currentTarget.checked);\r\n    return (\r\n        <div>\r\n            <div>TestPage</div>\r\n            <div>\r\n                <SuperInputText\r\n                    value={text}\r\n                    onChangeText={setText}\r\n                    onEnter={showAlert}\r\n                    error={error}\r\n                />\r\n                <SuperButton onClick={showAlert}>delete</SuperButton>\r\n                <SuperCheckbox checked={checked} onChangeChecked={setChecked}>some text</SuperCheckbox>\r\n                <SuperCheckbox checked={checked} onChange={testOnChange}/>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {initializeAppTC} from \"../../bll/appReducer\";\r\nimport {AppRootStateType} from \"../../bll/store\";\r\n\r\nexport const Main = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.loginRegister.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const authHandler = () => {\r\n        dispatch(initializeAppTC())\r\n    }\r\n    return (\r\n        <div>\r\n            <div>Main</div>\r\n            {isLoggedIn && <button onClick={authHandler}>Auth me</button>}\r\n        </div>\r\n    );\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport s from './Forgot.module.css';\r\nimport SuperInputText from \"../../../../d1-main/ui/common/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../../../d1-main/ui/common/c2-SuperButton/SuperButton\";\r\nimport {PATH} from \"../../../../d1-main/ui/Routes/Routes\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {forgotError, forgotTC} from \"../f-2-bll/b-2-redux/forgotReducer\";\r\n\r\n\r\ntype ForgotProps = {\r\n    error: string\r\n}\r\n\r\nconst Forgot: React.FC<ForgotProps> = ({error}) => {\r\n\r\n    console.log('render Forgot');\r\n    useEffect(() => {\r\n        dispatch(forgotError(''))\r\n    }, [])\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onForgotHandler = () => {\r\n        dispatch(forgotTC(email))\r\n    }\r\n    const [email, setEmail] = useState('')\r\n\r\n    const onEmailChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value)\r\n        dispatch(forgotError(''))\r\n    }\r\n\r\n    return (\r\n        <div className={s.body}>\r\n            <div className={s.header}>It-incubator</div>\r\n            <div className={s.page}>Forgot your password?</div>\r\n            <SuperInputText onChange={onEmailChange} error={error} placeholder={'Email'}/>\r\n            <div className={s.text}>Enter your email address and we will send you further instructions</div>\r\n            <SuperButton onClick={onForgotHandler}>Send Instructions</SuperButton>\r\n            <div className={s.text}>Did you remember your password?</div>\r\n            <NavLink to={PATH.LOGIN} className={s.link}>Try logging in</NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Forgot;\r\n","import React from 'react';\r\nimport s from './Forgot.module.css';\r\n\r\n\r\ntype CheckEmailProps = {\r\n    email: string\r\n}\r\n\r\nexport const CheckEmail: React.FC<CheckEmailProps> = ({email}) => {\r\n\r\n    console.log('render CheckEmail');\r\n\r\n    return (\r\n        <div className={s.body}>\r\n            <div className={s.header}>It-incubator</div>\r\n            <div className={s.page}>Check Email</div>\r\n            <div className={s.text}>We've sent an Email with instructions to {email}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport {Redirect} from \"react-router\";\r\nimport Forgot from './Forgot';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../d1-main/bll/store\";\r\nimport {CheckEmail} from \"./CheckEmail\";\r\n\r\nconst ForgotContainer: React.FC = () => {\r\n    const linkSent = useSelector<AppRootStateType, boolean>(state => state.forgot.linkSent)\r\n    const email = useSelector<AppRootStateType, string>(state => state.forgot.email)\r\n    const error = useSelector<AppRootStateType, string>(state => state.forgot.error)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.loginRegister.isLoggedIn)\r\n\r\n    if(isLoggedIn) { // если не залогинен\r\n        return <Redirect to={'/'} />\r\n    }\r\n\r\n    return <>\r\n        {linkSent ? <CheckEmail email={email}/> : <Forgot error={error}/>}\r\n    </>\r\n};\r\n\r\nexport default ForgotContainer;\r\n","import React from 'react';\r\nimport ForgotContainer from './ForgotContainer';\r\n\r\n\r\nconst ForgotPage: React.FC = () => {\r\n    console.log('render ForgotPage');\r\n\r\n\r\n    return (<>\r\n            <ForgotContainer/>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ForgotPage;\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {Redirect} from \"react-router\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../d1-main/bll/store\";\r\nimport s from \"./Forgot.module.css\";\r\nimport SuperInputText from \"../../../../d1-main/ui/common/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../../../d1-main/ui/common/c2-SuperButton/SuperButton\";\r\nimport {forgotError, setPassTC} from \"../f-2-bll/b-2-redux/forgotReducer\";\r\nimport {useParams, withRouter } from 'react-router-dom';\r\n\r\nconst SetPass: React.FC = () => {\r\n    const {token} = useParams<{token: string}>()\r\n    console.log('render SetPass')\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(forgotError(''))\r\n    }, [])\r\n    const error = useSelector<AppRootStateType, string>(state => state.forgot.error)\r\n    const setNewPass = useSelector<AppRootStateType, boolean>(state => state.forgot.setNewPass)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.loginRegister.isLoggedIn)\r\n\r\n    const [password, setPassword] = useState('')\r\n    const onPasswordChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(e.currentTarget.value)\r\n        if (error) {\r\n            dispatch(forgotError(''))\r\n        }\r\n    }\r\n\r\n    const onSetPassHandler = () => {\r\n        if (password.length < 8) {\r\n            dispatch(forgotError('Password must be more than 7 characters'))\r\n        } else {\r\n            dispatch(setPassTC({password: password, resetPasswordToken: token}))\r\n        }\r\n    }\r\n\r\n    if (setNewPass) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.body}>\r\n            <div className={s.header}>It-incubator</div>\r\n            <div className={s.page}>Create new password</div>\r\n            <SuperInputText onChange={onPasswordChange} error={error} placeholder={'Password'}/>\r\n            <div className={s.text}>Create new password and we will send you further instructions to email</div>\r\n            <SuperButton onClick={onSetPassHandler}>Create new password</SuperButton>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withRouter(SetPass)","import {instance} from \"./base-url\";\r\n\r\n\r\n// api\r\nexport const tablesAPI = {\r\n    getCardsPack(getPackParams: GetPackParams) {\r\n        return instance.get<ResponsePacksType>(`cards/pack`, {params: {...getPackParams}})\r\n    },\r\n    createCardsPack(createData: CreateParamsType) {\r\n        return instance.post<CardsPackType>('cards/pack', {...createData})\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete<CardsPackType>('cards/pack', {params: {id}})\r\n    },\r\n    updatePack(updateData: UpdateCardsPackType) {\r\n        return instance.put<CardsPackType>('cards/pack', {...updateData})\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type TypeCardsPackType = 'pack' | 'folder'\r\n\r\nexport type GetPackParams = {\r\n    packName?:string\r\n    min?:number\r\n    max?:number\r\n    sortPacks?:string\r\n    page?:number\r\n    pageCount?:number\r\n    user_id?:string\r\n}\r\n\r\nexport type CardsPackType = {\r\n    _id: string\r\n    user_id: string\r\n    name: string\r\n    path: string// папка\r\n    cardsCount: number\r\n    grade: number // средняя оценка карточек\r\n    shots: number // количество попыток\r\n    rating: number // лайки\r\n    type: TypeCardsPackType\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n}\r\nexport type UpdateCardsPackType = {\r\n    _id: string\r\n    name?: string\r\n    path?: string// папка\r\n    cardsCount?: number\r\n    grade?: number // средняя оценка карточек\r\n    shots?: number // количество попыток\r\n    rating?: number // лайки\r\n    type?: TypeCardsPackType\r\n    created?: string\r\n    updated?: string\r\n    __v?: number\r\n}\r\nexport type ResponsePacksType = {\r\n    cardPacks: Array<CardsPackType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token?: string\r\n    tokenDeathTime?: number\r\n    sortPacks?: string\r\n    packName?: string\r\n    minParam?: number\r\n    maxParam?: number\r\n    user_id?: string\r\n}\r\n\r\nexport type CreateParamsType = {\r\n    cardsPack: {\r\n        name?: string\r\n        path?: string\r\n        grade?: number\r\n        shots?: number\r\n        rating?: number\r\n        deckCover?: string\r\n        private?: boolean\r\n        type?: TypeCardsPackType\r\n    }\r\n}\r\nexport type CardsParams = {\r\n    packName?: string\r\n    min?: number\r\n    max?: number\r\n    sortPacks?: string\r\n    page?: number\r\n    pageCount?: number\r\n    user_id?: string\r\n}","import {Dispatch} from 'redux'\r\nimport {\r\n    CardsPackType,\r\n    CreateParamsType,\r\n    GetPackParams,\r\n    ResponsePacksType,\r\n    tablesAPI,\r\n    UpdateCardsPackType\r\n} from '../dal/api-tabels'\r\nimport {AppRootStateType} from './store'\r\n\r\nconst initialState = {\r\n    cardPacks: [\r\n        {\r\n            _id: \"5eb6cef840b7bf1cf0d8122d\",\r\n            user_id: \"5eb543f6bea3ad21480f1ee7\",\r\n            name: \"no Name\",\r\n            path: \"/def\",\r\n            cardsCount: 25,\r\n            grade: 0,\r\n            shots: 0,\r\n            rating: 0,\r\n            type: \"pack\" as const,\r\n            created: \"2020-05-09T15:40:40.339Z\",\r\n            updated: \"2020-05-09T15:40:40.339Z\",\r\n            __v: 0\r\n        },\r\n    ],\r\n    cardPacksTotalCount: 14,\r\n    maxCardsCount: 4,\r\n    minCardsCount: 0,\r\n    page: 1,\r\n    pageCount: 4,\r\n    token: '',\r\n    tokenDeathTime: 0,\r\n    sortPacks: '',\r\n    packName: '',\r\n    minParam: 0,\r\n    maxParam: 103,\r\n    user_id: ''\r\n}\r\n\r\nexport const tablesReducer = (state: ResponsePacksType = initialState, action: ActionsTableType): ResponsePacksType => {\r\n    switch (action.type) {\r\n        case \"GET_PACKS\": {\r\n            return {...action.packs}\r\n        }\r\n        case \"CREATE_NEW_PACK\": {\r\n            let newState = state\r\n            newState.cardPacks.push(action.pack)\r\n            return {...newState}\r\n        }\r\n        case 'UPDATE_VALUES':\r\n            return {...state, ...action.payload}\r\n    }\r\n    return state\r\n}\r\n\r\nconst getPackAC = (packs: ResponsePacksType) => ({type: \"GET_PACKS\", packs} as const)\r\nconst addPackAC = (pack: CardsPackType) => ({type: \"CREATE_NEW_PACK\", pack} as const)\r\nexport const updateValuesAC = (payload: SetValuesType) => ({\r\n    type: 'UPDATE_VALUES',\r\n    payload\r\n} as const)\r\n\r\n\r\nexport type GetPackActionType = ReturnType<typeof getPackAC>\r\nexport type CreatePackActionType = ReturnType<typeof addPackAC>\r\nexport type ActionsTableType = GetPackActionType | CreatePackActionType | ReturnType<typeof updateValuesAC>\r\n\r\nexport const getPackTC = (params: GetPackParams = {}) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const tablesReducer = getState().tablesReducer\r\n    const cardsParamsModel: GetPackParams = {\r\n        packName: tablesReducer.packName,\r\n        min: tablesReducer.minParam,\r\n        max: tablesReducer.maxParam,\r\n        sortPacks: tablesReducer.sortPacks,\r\n        page: tablesReducer.page,\r\n        pageCount: tablesReducer.pageCount,\r\n        user_id: tablesReducer.user_id,\r\n        ...params\r\n    }\r\n    tablesAPI.getCardsPack(cardsParamsModel).then(res => {\r\n            dispatch(getPackAC(res.data))\r\n        }\r\n    )\r\n}\r\n\r\nexport const createPackTC = (newPackData: CreateParamsType, getPackParams: GetPackParams) => (dispatch: Dispatch) => {\r\n    tablesAPI.createCardsPack(newPackData).then(res => {\r\n            dispatch(addPackAC(res.data))\r\n        }\r\n    ).then(() =>\r\n        tablesAPI.getCardsPack(getPackParams).then(res => {\r\n                dispatch(getPackAC(res.data))\r\n            }\r\n        )\r\n    )\r\n}\r\nexport const removePackTC = (id: string, getPackParams: GetPackParams) => (dispatch: Dispatch) => {\r\n    tablesAPI.deletePack(id).then(() =>\r\n        tablesAPI.getCardsPack(getPackParams).then(res => {\r\n                dispatch(getPackAC(res.data))\r\n            }\r\n        )\r\n    )\r\n}\r\nexport const updatePackTC = (updateData: UpdateCardsPackType, getPackParams: GetPackParams) => (dispatch: Dispatch) => {\r\n    tablesAPI.updatePack(updateData).then(() =>\r\n        tablesAPI.getCardsPack(getPackParams).then(res => {\r\n                dispatch(getPackAC(res.data))\r\n            }\r\n        )\r\n    )\r\n}\r\n\r\nexport type SetValuesType = {\r\n    minCardsCount?: number,\r\n    maxCardsCount?: number,\r\n    sortPacks?: string,\r\n    page?: number,\r\n    pageCount?: number,\r\n    packName?: string,\r\n    user_id?: string\r\n}","import React, {useState} from 'react'\r\nimport s from './Paginator.module.css'\r\n\r\n\r\ntype PaginatorPropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    portionSize?: number\r\n    disabled?: boolean\r\n    onPageNumberClick: (pageNumber: number) => void\r\n}\r\n\r\nexport function Paginator(props: PaginatorPropsType) {\r\n    const {totalItemsCount, pageSize, currentPage, onPageNumberClick, portionSize = 5, disabled = false} = props\r\n    const [portionNumber, setPortionNumber] = useState(1)\r\n\r\n    const pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n    let pages: number[] = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    const portionCount = Math.ceil(pagesCount / portionSize)\r\n    const leftPortionNumber = (portionNumber - 1) * portionSize\r\n    const rightPortionNumber = portionNumber * portionSize\r\n\r\n    const onSpanClick = (p: number) => {\r\n        if (!disabled) onPageNumberClick(p)\r\n    }\r\n\r\n    return (\r\n        <div className={s.paginator}>\r\n            <button onClick={() => setPortionNumber(portionNumber - 1)}\r\n                    disabled={!(portionNumber - 1)}\r\n                    className={s.btn}>\r\n            </button>\r\n            <div className={s.paginatorNumbers}>\r\n                {!(portionNumber - 1) || <span className={s.page} onClick={() => setPortionNumber(1)}>1 ...</span>}\r\n                {pages.filter(p => p > leftPortionNumber && p <= rightPortionNumber)\r\n                    .map(p => <span key={p}\r\n                                    className={currentPage === p ? s.page + ' ' + s.currentPage : s.page}\r\n                                    onClick={() => onSpanClick(p)}\r\n                    >{p}</span>)}\r\n                {portionNumber >= portionCount || <span className={`${s.page} ${s.lastPage}`}\r\n                                                        onClick={() => setPortionNumber(portionCount)}>... {pagesCount}</span>}\r\n            </div>\r\n            <button onClick={() => setPortionNumber(portionNumber + 1)}\r\n                    disabled={portionNumber >= portionCount}\r\n                    className={s.btn}>\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react'\r\nimport SuperInputText from '../../common/c1-SuperInputText/SuperInputText'\r\nimport s from './Search.module.css'\r\nimport {GetPackParams} from \"../../../dal/api-tabels\";\r\n\r\n\r\ntype SearchPropsType = {\r\n    searchCallback: (getPackParams: GetPackParams) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const Search: React.FC<SearchPropsType> = ({searchCallback, disabled = false}) => {\r\n\r\n    const [searchText, setSearchText] = useState('')\r\n\r\n    const onEnterCB = () => {\r\n        if (!disabled) {\r\n            searchCallback({packName: searchText})\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.searchBar}>\r\n            <SuperInputText className={s.searchBarInput}\r\n                            placeholder={'Search...'}\r\n                            onChangeText={setSearchText}\r\n                            onEnter={onEnterCB}/>\r\n            <button className={s.searchBarBtn} onClick={onEnterCB} disabled={disabled}/>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect} from 'react';\r\nimport {CardsPackType, CreateParamsType, ResponsePacksType, GetPackParams, UpdateCardsPackType} from \"../../d1-main/dal/api-tabels\";\r\nimport {Paper, Table, TableBody, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {Paginator} from \"../../d1-main/ui/components/c-2 Paginator/Paginator\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../d1-main/bll/store\";\r\nimport {getPackTC, SetValuesType, updateValuesAC} from \"../../d1-main/bll/tablesReducer\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Search} from \"../../d1-main/ui/components/c-5 Search/Search\";\r\n\r\n\r\ntype TablePropsType = {\r\n    packs: Array<CardsPackType>\r\n    getPack: (getPackParams: GetPackParams) => void\r\n    getCards: (id: string) => void\r\n    createPack: (newPackData: CreateParamsType, getPackParams: GetPackParams) => void\r\n    removePack: (id: string, getPackParams: GetPackParams) => void\r\n    updatePack: (updateData: UpdateCardsPackType, getPackParams: GetPackParams) => void\r\n    userId?: string\r\n}\r\n\r\nconst Tables = (props: TablePropsType) => {\r\n    const history = useHistory();\r\n    const dispatch = useDispatch()\r\n    useEffect( () => {\r\n        props.getPack({user_id: props.userId});\r\n    }, [])\r\n    const packsState = useSelector<AppRootStateType, ResponsePacksType>(state => state.tablesReducer)\r\n    const setParams = (requestParams: SetValuesType) => {\r\n        dispatch(updateValuesAC(requestParams))\r\n        dispatch(getPackTC())\r\n    }\r\n\r\n    const pageNumberRequest = (page: number) => setParams({page})\r\n\r\n    const useStyles = makeStyles({\r\n        table: {\r\n            minWidth: 650,\r\n        },\r\n    });\r\n    const addPackHandler = () => {props.createPack({cardsPack: {name: 'newPackName'}}, {user_id: props.userId})}\r\n    const classes = useStyles();\r\n    return (\r\n        <div\r\n            style={{\r\n                margin: '0 10px',\r\n// minHeight: '80vh',\r\n                display: 'flex',\r\n                flexFlow: 'column',\r\n                alignItems: 'center',\r\n                justifyContent: 'center'\r\n            }}\r\n        >\r\n            <Search searchCallback={props.getPack} disabled={false}/>\r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table} aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Packs</TableCell>\r\n                            <TableCell align=\"center\">cardsCount</TableCell>\r\n                            <TableCell align=\"center\">updated</TableCell>\r\n                            <TableCell align=\"center\">url</TableCell>\r\n                            <TableCell align=\"center\"><Button onClick={addPackHandler} variant=\"contained\" color=\"primary\">Add pack</Button></TableCell>\r\n                            <TableCell align=\"center\"><span>{\"\"}</span></TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {props.packs.map((row) => {\r\n                            const removeHandler = () => {\r\n                                props.removePack(row._id, {user_id: props.userId})\r\n                            }\r\n                            const updateHandler = () => {\r\n                                props.updatePack({_id: row._id}, {user_id: props.userId})\r\n                            }\r\n                            async function GetAsyncRedirect() {\r\n                                props.getCards(row._id)\r\n                            }\r\n                            const redirectHandler = () => {\r\n                                console.log()\r\n                                GetAsyncRedirect().then(() => {\r\n                                    history.push('/cards/'+row._id)\r\n                                })\r\n                            }\r\n                            return (\r\n                                <TableRow key={row.name}>\r\n                                    <TableCell component=\"th\" scope=\"row\">{row.name} </TableCell>\r\n                                    <TableCell align=\"center\">{row.cardsCount}</TableCell>\r\n                                    <TableCell align=\"center\">{row.updated}</TableCell>\r\n                                    <TableCell align=\"center\">{row.path}</TableCell>\r\n                                    <TableCell align=\"center\"><Button onClick={removeHandler} variant=\"contained\" color=\"primary\">remove</Button></TableCell>\r\n                                    <TableCell align=\"center\"><Button onClick={updateHandler} variant=\"contained\" color=\"primary\">update</Button></TableCell>\r\n                                    <TableCell align=\"center\"><Button onClick={redirectHandler} variant=\"contained\" color=\"primary\">To cards</Button></TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        }\r\n                        )\r\n                       }\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <Paginator totalItemsCount={packsState.cardPacksTotalCount}\r\n                       pageSize={packsState.pageCount}\r\n                       currentPage={packsState.page}\r\n                       // disabled={}\r\n                       onPageNumberClick={pageNumberRequest}\r\n            />\r\n            <div style={{ height: 400, width: '100%' }}>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Tables;\r\n","import {instance} from \"./base-url\";\r\n\r\n\r\n// api\r\nexport const cardsAPI = {\r\n    getCards(paramsObj: GetCardsParams) {\r\n        return instance.get<ResponseCardsType>(`cards/card`, {params: {...paramsObj}})\r\n    },\r\n    createCard(createData: CreateCardParamsType) {\r\n        return instance.post<CardType>('cards/card', {...createData})\r\n    },\r\n    deleteCard(id: string) {\r\n        return instance.delete<CardType>('cards/card', {params: {id}})\r\n    },\r\n    updateCard(updateData: UpdateCardType) {\r\n        return instance.put<CardType>('cards/card', {...updateData})\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type GetCardsParams = {\r\n    cardAnswer?: string\r\n    cardQuestion?: string\r\n    cardsPack_id: string\r\n    min?: number\r\n    max?: number\r\n    sortCards?: number\r\n    page?: number\r\n    pageCount?: number\r\n}\r\n\r\nexport type CardType = {\r\n        answer: string\r\n        question: string\r\n        cardsPack_id: string\r\n        grade: number\r\n        rating: number\r\n        shots: number\r\n        type: string\r\n        user_id: string\r\n        created: string\r\n        updated: string\r\n        __v: number\r\n        _id: string\r\n}\r\nexport type UpdateCardType = {\r\n    card: {\r\n        _id: string\r\n        answer?: string\r\n        question?: string\r\n        cardsPack_id?: string\r\n        grade?: number\r\n        rating?: number\r\n        shots?: number\r\n        type?: string\r\n        user_id?: string\r\n        created?: string\r\n        updated?: string\r\n        __v?: number\r\n        comments?: string\r\n    }\r\n}\r\nexport type ResponseCardsType = {\r\n    cards: Array<CardType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\n\r\nexport type CreateCardParamsType = {\r\n    card: {\r\n        cardsPack_id: string\r\n        question?: string\r\n        answer?: string\r\n        grade?: number\r\n        shots?: number\r\n        rating?: number\r\n        answerImg?: string\r\n        questionImg?: string\r\n        questionVideo?: string\r\n        answerVideo?: string\r\n        type?: string\r\n    }\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {\r\n    cardsAPI,\r\n    CardType,\r\n    CreateCardParamsType,\r\n    GetCardsParams,\r\n    ResponseCardsType,\r\n    UpdateCardType\r\n} from '../dal/api-cards'\r\n\r\nconst initialState = {\r\n    cards: [\r\n        {\r\n            answer: \"no answer\",\r\n            question: \"no question\",\r\n            cardsPack_id: \"5eb6a2f72f849402d46c6ac4\",\r\n            grade: 4.987525071790364,\r\n            rating: 0,\r\n            shots: 1,\r\n            type: \"card\",\r\n            user_id: \"142151531535151\",\r\n            created: \"2020-05-13T11:05:44.867Z\",\r\n            updated: \"2020-05-13T11:05:44.867Z\",\r\n            __v: 0,\r\n            _id: \"5ebbd48876810f1ad0e7ece3\"\r\n        },\r\n    ],\r\n    cardsTotalCount: 3,\r\n    maxGrade: 4.987525071790364,\r\n    minGrade: 2.0100984354076568,\r\n    page: 1,\r\n    pageCount: 4,\r\n    packUserId: \"5eecf82a3ed8f700042f1186\"\r\n}\r\n\r\nexport const cardReducer = (state: ResponseCardsType = initialState, action: ActionsCardsType) => {\r\n    switch (action.type) {\r\n        case \"GET_CARDS\": {\r\n            return {...action.cards}\r\n        }\r\n        case \"CREATE_NEW_CARD\": {\r\n            let newState = state\r\n            newState.cards.push(action.card)\r\n            return {...newState}\r\n        }\r\n    }\r\n    return state\r\n}\r\n\r\nconst getCardsAC = (cards: ResponseCardsType) => ({type: \"GET_CARDS\", cards} as const)\r\nconst addCardAC = (card: CardType) => ({type: \"CREATE_NEW_CARD\", card} as const)\r\n\r\nexport type GetCardsActionType = ReturnType<typeof getCardsAC>\r\nexport type CreateCardActionType = ReturnType<typeof addCardAC>\r\nexport type ActionsCardsType = GetCardsActionType | CreateCardActionType\r\n\r\nexport const getCardsTC = (getParams: GetCardsParams) => (dispatch: Dispatch) => {\r\n    cardsAPI.getCards(getParams).then( res => {\r\n            dispatch(getCardsAC(res.data))\r\n        }\r\n    )\r\n}\r\nexport const createCardTC = (createData: CreateCardParamsType, getParams: GetCardsParams) => (dispatch: Dispatch) => {\r\n    cardsAPI.createCard(createData).then( res => {\r\n            dispatch(addCardAC(res.data))\r\n        }\r\n    ).then( () =>\r\n        cardsAPI.getCards(getParams).then(res => {\r\n                dispatch(getCardsAC(res.data))\r\n            }\r\n        )\r\n    )\r\n}\r\nexport const removeCardTC = (id: string, cardsPack_id: string) => (dispatch: Dispatch) => {\r\n    cardsAPI.deleteCard(id).then(() =>\r\n        cardsAPI.getCards({cardsPack_id}).then(res => {\r\n                dispatch(getCardsAC(res.data))\r\n            }\r\n        )\r\n    )\r\n}\r\nexport const updateCardTC = (updateData: UpdateCardType, cardsPack_id: string) => (dispatch: Dispatch) => {\r\n    cardsAPI.updateCard(updateData).then( () =>\r\n        cardsAPI.getCards({cardsPack_id}).then(res => {\r\n                dispatch(getCardsAC(res.data))\r\n            }\r\n        )\r\n    )\r\n}\r\n","import React, {useCallback} from \"react\";\r\nimport {createPackTC, getPackTC, removePackTC, updatePackTC} from \"../../d1-main/bll/tablesReducer\";\r\nimport Table from \"./Tables\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {CardsPackType, CreateParamsType, GetPackParams, UpdateCardsPackType} from \"../../d1-main/dal/api-tabels\";\r\nimport {AppRootStateType} from \"../../d1-main/bll/store\";\r\nimport {getCardsTC} from \"../../d1-main/bll/cardsReducer\";\r\nimport {Redirect} from \"react-router\";\r\n\r\ntype PropsType = {\r\n    userId?: string\r\n}\r\n\r\nconst TableContainer = (props: PropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.loginRegister.isLoggedIn)\r\n\r\n    let packs = useSelector<AppRootStateType, Array<CardsPackType>>(state => state.tablesReducer.cardPacks)\r\n    const getPack = useCallback(function (getPackParams: GetPackParams) {\r\n        const thunk = getPackTC(getPackParams)\r\n        dispatch(thunk)\r\n    }, [])\r\n    const getCards = useCallback(function (id: string) {\r\n        const thunk = getCardsTC({cardsPack_id: id})\r\n        dispatch(thunk)\r\n    }, [])\r\n    const createPack = useCallback(function (newPackData: CreateParamsType, getPackParams: GetPackParams) {\r\n        const thunk = createPackTC(newPackData, getPackParams)\r\n        dispatch(thunk)\r\n    }, [])\r\n    const removePack = useCallback(function (id: string, getPackParams: GetPackParams) {\r\n        const thunk = removePackTC(id, getPackParams)\r\n        dispatch(thunk)\r\n    }, [])\r\n    const updatePack = useCallback(function (updateData: UpdateCardsPackType, getPackParams: GetPackParams) {\r\n        const thunk = updatePackTC(updateData, getPackParams)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    return  <div>\r\n        <Table\r\n            packs={packs}\r\n            getPack={getPack}\r\n            getCards={getCards}\r\n            createPack={createPack}\r\n            removePack={removePack}\r\n            updatePack={updatePack}\r\n            userId={props.userId}\r\n        />\r\n    </div>\r\n}\r\nexport default TableContainer;\r\n","import React from \"react\";\r\nimport TableContainer from \"../../../d2-features/tabels/TableContainer\";\r\nimport {Redirect} from \"react-router\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../bll/store\";\r\n\r\n\r\n\r\nexport const Profile = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.loginRegister.isLoggedIn)\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n    return (\r\n        <div>\r\n            <div>Profile</div>\r\n            <TableContainer />\r\n        </div>\r\n    );\r\n}\r\n","import React, {useState} from 'react'\r\nimport SuperInputText from '../../common/c1-SuperInputText/SuperInputText'\r\nimport s from './Search.module.css'\r\n\r\n\r\ntype SearchPropsType = {\r\n    searchCallback: (searchText: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const SearchForCards: React.FC<SearchPropsType> = ({searchCallback, disabled = false}) => {\r\n\r\n    const [searchText, setSearchText] = useState('')\r\n\r\n    const onEnterCB = () => {\r\n        if (!disabled) {\r\n            searchCallback(searchText)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.searchBar}>\r\n            <SuperInputText className={s.searchBarInput}\r\n                            placeholder={'Search...'}\r\n                            onChangeText={setSearchText}\r\n                            onEnter={onEnterCB}/>\r\n            <button className={s.searchBarBtn} onClick={onEnterCB} disabled={disabled}/>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect} from 'react';\r\nimport {Paper, Table, TableBody, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport {CardType, CreateCardParamsType, GetCardsParams, UpdateCardType} from \"../../d1-main/dal/api-cards\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../d1-main/bll/store\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {SearchForCards} from \"../../d1-main/ui/components/c-5 Search/SearchForCards\";\r\n\r\n\r\ntype CardsPropsType = {\r\n    cards: Array<CardType>\r\n    getCards: (id: string) => void\r\n    createCard: (createData: CreateCardParamsType, getParams: GetCardsParams) => void\r\n    removeCard: (id: string, cardsPack_id: string) => void\r\n    updateCard: (updateData: UpdateCardType, cardsPack_id: string) => void\r\n    packId?: string\r\n}\r\n\r\nconst Cards = (props: CardsPropsType) => {\r\n\r\n\r\n    // useEffect( () => {\r\n    //     props.getCards(\"5eb6a2f72f849402d46c6ac4\");\r\n    // }, [])\r\n\r\n    const packId = useSelector<AppRootStateType, string>(state => state.tablesReducer.cardPacks[0]?._id)\r\n    const useStyles = makeStyles({\r\n        table: {\r\n            minWidth: 650,\r\n        },\r\n    });\r\n\r\n    const addCardHandler = () => {\r\n        props.createCard({card: {cardsPack_id: packId, question: \"newQuestion\", answer: 'NewAnswer'}}, {cardsPack_id: packId})\r\n    }\r\n    const classes = useStyles();\r\n    return (\r\n        <div\r\n            style={{\r\n                margin: '0 10px',\r\n// minHeight: '80vh',\r\n                display: 'flex',\r\n                flexFlow: 'column',\r\n                alignItems: 'center',\r\n                justifyContent: 'center'\r\n            }}\r\n        >\r\n            <SearchForCards searchCallback={props.getCards} disabled={false}/>\r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table} aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>question</TableCell>\r\n                            <TableCell align=\"center\">answer</TableCell>\r\n                            <TableCell align=\"center\">Grade</TableCell>\r\n                            <TableCell align=\"center\">updated</TableCell>\r\n                            <TableCell align=\"center\"><Button onClick={addCardHandler} variant=\"contained\" color=\"primary\">Add card</Button></TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {props.cards.map((row) => {\r\n                            const removeHandler = () => {\r\n                                props.removeCard(row._id, row.cardsPack_id)\r\n                            }\r\n                            const updateHandler = () => {\r\n                                props.updateCard({card: {_id: row._id}}, row.cardsPack_id)\r\n                            }\r\n                            return (\r\n                                <TableRow key={row._id}>\r\n                                    <TableCell component=\"th\" scope=\"row\">{row.question} </TableCell>\r\n                                    <TableCell align=\"center\">{row.answer}</TableCell>\r\n                                    <TableCell align=\"center\">{row.grade}</TableCell>\r\n                                    <TableCell align=\"center\">{row.updated}</TableCell>\r\n                                    <TableCell align=\"center\"><Button onClick={removeHandler} variant=\"contained\" color=\"primary\">remove</Button></TableCell>\r\n                                    <TableCell align=\"center\"><Button onClick={updateHandler} variant=\"contained\" color=\"primary\">update</Button></TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        }\r\n                        )\r\n                       }\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <div style={{ height: 400, width: '100%' }}>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cards;\r\n","import React, {useCallback} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../d1-main/bll/store\";\r\nimport Cards from \"./Cards\";\r\nimport {CardType, CreateCardParamsType, GetCardsParams, UpdateCardType} from \"../../d1-main/dal/api-cards\";\r\nimport {createCardTC, getCardsTC, removeCardTC, updateCardTC} from \"../../d1-main/bll/cardsReducer\";\r\nimport {Redirect} from \"react-router\";\r\n\r\ntype PropsType = {\r\n    packId?: string\r\n}\r\n\r\nconst CardsContainer = (props: PropsType) => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.loginRegister.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    let cards = useSelector<AppRootStateType, Array<CardType>>(state => state.cardReducer.cards)\r\n    const getCards = useCallback(function (id: string) {\r\n        const thunk = getCardsTC({cardsPack_id: id})\r\n        dispatch(thunk)\r\n    }, [])\r\n    const createCard = useCallback(function (createData: CreateCardParamsType, getParams: GetCardsParams) {\r\n        const thunk = createCardTC(createData, getParams)\r\n        dispatch(thunk)\r\n    }, [])\r\n    const removeCard = useCallback(function (id: string, cardsPack_id: string) {\r\n        const thunk = removeCardTC(id, cardsPack_id)\r\n        dispatch(thunk)\r\n    }, [])\r\n    const updateCard = useCallback(function (updateData: UpdateCardType, cardsPack_id: string) {\r\n        const thunk = updateCardTC(updateData, cardsPack_id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    return  <div>\r\n        <Cards\r\n            cards={cards}\r\n            getCards={getCards}\r\n            createCard={createCard}\r\n            removeCard={removeCard}\r\n            updateCard={updateCard}\r\n            packId={props.packId}\r\n        />\r\n    </div>\r\n}\r\nexport default CardsContainer;\r\n","import React from \"react\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {Error404} from \"../common/c4-Error404/Error404\";\r\nimport {Login} from \"../../../d2-features/f1-auth/a1-login/Login\";\r\nimport {Register} from \"../../../d2-features/f1-auth/a2-register/Register\";\r\nimport {TestPage} from \"../../../d2-features/f0-test/TestPage\";\r\nimport {Main} from \"../Main/Main\";\r\nimport ForgotPage from \"../../../d2-features/f1-auth/a3-forgot/f-1-ui/ForgotPage\";\r\nimport SetPass from \"../../../d2-features/f1-auth/a3-forgot/f-1-ui/SetPass\";\r\nimport {Profile} from \"../Profile/Profile\";\r\nimport TableContainer from \"../../../d2-features/tabels/TableContainer\";\r\nimport CardsContainer from \"../../../d2-features/cards/CardsContainer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../bll/store\";\r\n\r\nexport const PATH = {\r\n    MAIN: \"/main\",\r\n    LOGIN: \"/login\",\r\n    REGISTER: \"/register\",\r\n    TEST: \"/test\",\r\n    FORGOT: \"/forgot\",\r\n    SET_PASS: \"/set-new-password/:token\",\r\n    PROFILE: \"/profile\",\r\n    PACKS: \"/packs\",\r\n    CARDS: \"/cards\"\r\n}\r\n\r\nexport const Routes = () => {\r\n    const userId = useSelector<AppRootStateType, string>( state => state.loginRegister.userData._id)\r\n    return (\r\n        <div>\r\n            <Switch>\r\n                <Route path={\"/\"} exact render={() => <Redirect to={PATH.MAIN}/>}/>\r\n                <Route path={PATH.MAIN} render={() => <Main/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={PATH.REGISTER} render={() => <Register/>}/>\r\n                <Route path={PATH.FORGOT} render={() => <ForgotPage/>}/>\r\n                <Route path={PATH.SET_PASS} render={() => <SetPass/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n                <Route path={PATH.TEST} render={() => <TestPage/>}/>\r\n                <Route path={PATH.PACKS} render={() => <TableContainer userId={userId}/>}/>\r\n                <Route path={PATH.CARDS} render={() => <CardsContainer/>}/>\r\n                <Route render={() => <Error404/>}/>\r\n\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { PATH } from \"../Routes/Routes\";\r\nimport s from \"./Header.module.css\";\r\nimport {logoutTC} from \"../../bll/loginReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nexport const Header = (props: HeaderPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n    return (\r\n        <div className={s.header}>\r\n            <NavLink to={PATH.MAIN} className={s.link} activeClassName={s.active}>Main</NavLink>\r\n            <NavLink to={PATH.LOGIN} className={s.link} activeClassName={s.active}>Login</NavLink>\r\n            <NavLink to={PATH.REGISTER} className={s.link} activeClassName={s.active}>Register</NavLink>\r\n            <NavLink to={PATH.FORGOT} className={s.link} activeClassName={s.active}>Forgot</NavLink>\r\n            <NavLink to={PATH.SET_PASS} className={s.link} activeClassName={s.active}>SetPass</NavLink>\r\n            {/*{!props.isLoggedIn && <NavLink to={PATH.SET_PASS} className={s.link} activeClassName={s.active}>SetPass</NavLink>}*/}\r\n            {/*{!props.isLoggedIn && <NavLink to={PATH.REGISTER} className={s.link} activeClassName={s.active}>Register</NavLink>}*/}\r\n            <NavLink to={PATH.PROFILE} className={s.link} activeClassName={s.active}>Profile</NavLink>\r\n            <NavLink to={PATH.TEST} className={s.link} activeClassName={s.active}>TestPage</NavLink>\r\n            <NavLink to={PATH.PACKS} className={s.link} activeClassName={s.active}>Packs</NavLink>\r\n            <NavLink to={PATH.CARDS} className={s.link} activeClassName={s.active}>Cards</NavLink>\r\n            {props.isLoggedIn && <button className={s.link} onClick={logoutHandler}>Log out</button>}\r\n            {/*<div className={s.block}/>*/}\r\n        </div>\r\n    );\r\n}\r\n\r\ntype HeaderPropsType = {\r\n    isLoggedIn: boolean\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Header} from \"./Header/Header\";\r\nimport {Routes} from \"./Routes/Routes\";\r\nimport {AppRootStateType} from '../bll/store';\r\nimport {initializeAppTC, RequestStatusType} from \"../bll/appReducer\";\r\n\r\nconst App = () => {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.loginRegister.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header isLoggedIn={isLoggedIn}/>\r\n            <Routes/>\r\n            {status === 'loading' && <div>LOADING...</div>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {authReducer} from \"./authReducer\";\r\nimport {appReducer} from \"./appReducer\";\r\nimport {forgotReducer} from \"../../d2-features/f1-auth/a3-forgot/f-2-bll/b-2-redux/forgotReducer\";\r\nimport { loginRegisterReducer } from './loginReducer';\r\nimport { tablesReducer } from './tablesReducer';\r\nimport { cardReducer } from './cardsReducer';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    loginRegister: loginRegisterReducer,\r\n    forgot: forgotReducer,\r\n    tablesReducer: tablesReducer,\r\n    cardReducer: cardReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './d1-main/ui/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {store} from \"./d1-main/bll/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__1LYg2\",\"page\":\"Paginator_page__e2nXR\",\"currentPage\":\"Paginator_currentPage__3rgSb\",\"lastPage\":\"Paginator_lastPage__bhfhQ\",\"paginatorNumbers\":\"Paginator_paginatorNumbers__1xm16\",\"btn\":\"Paginator_btn__1EIHc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"SuperInputText_input__25OR4\",\"superInput\":\"SuperInputText_superInput__3RWk6\",\"errorInput\":\"SuperInputText_errorInput__4-GBi\",\"error\":\"SuperInputText_error__4JXAQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBar\":\"Search_searchBar__1-rFc\",\"searchBarInput\":\"Search_searchBarInput__3MRPJ\",\"searchBarBtn\":\"Search_searchBarBtn__3oPTU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"Error404_body__1ZmcP\",\"c\":\"Error404_c__Y5t9r\",\"_404\":\"Error404__404__1xB8i\",\"_1\":\"Error404__1__2xlpo\",\"_2\":\"Error404__2__Vq8j7\",\"btn\":\"Error404_btn__3QVIX\",\"hr\":\"Error404_hr__iZU22\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"SuperButton_btn__1l1KE\",\"red\":\"SuperButton_red__3YjQN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"Forgot_body__1yGX2\",\"header\":\"Forgot_header__1VTNh\",\"page\":\"Forgot_page__36hEU\",\"text\":\"Forgot_text__2mze1\",\"textLink\":\"Forgot_textLink__2BWBZ\",\"link\":\"Forgot_link__2FjTQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__1jNOX\"};"],"sourceRoot":""}